name: Python CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Job 1: Install dependencies and lint the code
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint


  # Job 2: Run tests and check code coverage
  tests:
    runs-on: ubuntu-latest
    needs: lint  # This job will only run after the lint job succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests and collect code coverage
        run: |
          pytest --cov=my_package tests/ --cov-report=xml --maxfail=1 --disable-warnings

  # Job 3: Check code coverage threshold (80%)
  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Check code coverage
        run: |
          COVERAGE=$(pytest --cov=my_package --cov-report=term | grep -oP '\d+\.\d+(?=%)' | head -n 1)
          echo "Code Coverage: $COVERAGE%"
          if [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
            echo "Code coverage is below 80%. Please increase the coverage before merging.";
            exit 1;
          fi

  # Job 4: Deploy (optional, you can remove this if you do not want a deployment step)
  deploy:
    runs-on: ubuntu-latest
    needs: coverage
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to production (example)
        run: |
          echo "Deploying to production environment..."
          # Add your deployment steps here
